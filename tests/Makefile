# Makefile containing all rules used for unit test targets.

# Disable all make's default implicit rules so its debug output is more usable.
.SUFFIXES:

# The hashdeps makefile is in the parent directory of this file - this file's
# location will be the last file in the MAKEFILE_LIST variable.
include $(dir $(lastword $(MAKEFILE_LIST)))../hashdeps.mk

# Every time this rule runs, add another copy of source to the output file.
output1.tmp: $(call hash_deps,source1.tmp)
	@cat $(call unhash_deps,$^) >> $@

# Same as above, except two hashed dependencies.
output2.tmp: $(call hash_deps,source1.tmp source2.tmp)
	@cat $(call unhash_deps,$^) >> $@

# With only some dependencies hashed, show that make's built in variables used
# to reference all dependencies of a recipe can safely be unhashed.
output3.tmp: $(call hash_deps,source1.tmp) source2.tmp
	@cat $(call unhash_deps,$^) >> $@

# Example C compilation rule using auto-generated dependency files.

# Rules to create the source files so we don't have to save C files off.
# This just creates a very basic .c and .h file.
output4.tmp_sources:
	@echo '#include "c_source.h"' > c_source.c
	@echo 'int main() {'          >> c_source.c
	@echo '  return fn();'        >> c_source.c
	@echo '}'                     >> c_source.c
	@echo 'int fn(void) {'        >> c_source.c
	@echo '  return 1;'           >> c_source.c
	@echo '}'                     >> c_source.c
	@echo 'int fn(void);'         > c_source.h

# Example standard rules for compiling C files and autogenerating dependencies,
# modified to hash all dependencies with hashdeps.
# This is mainly just wrapping with `hash_deps` and `unhash_deps`, but also
# editing the autogenerated dependency file with
# `hash_deps_in_autogen_dep_file`.
#
# Similar to all the other rules, we'll actually just write a text line to the
# target every time it's made so we can track number of re-builds.
# We'll still run the compilation to be sure everything works, but put it into
# a .exe suffixed file.

TARGET_4_SRCS:=c_source.c
TARGET_4_OBJS:=$(TARGET_4_SRCS:%.c=%.o)
-include $(TARGET_4_OBJS:%.o=%.d)

output4.tmp: $(call hash_deps,$(TARGET_4_OBJS))
	@echo Linking: $(call unhash_deps,$^) into $@
	@$(CC) -o $@.exe $(call unhash_deps,$^)
	@echo "This is a line of source" >> $@

# Note the `-MM` here to omit system headers from the dependencies to we don't
# hash those and try and create hash files in system directories.
%.d: $(call hash_deps,%.c)
	@echo Dependencies: $@ for $(call unhash_deps,$^)
	@$(CC) -fPIC -MM -MP -MT $(@:%.d=%.o) $(call unhash_deps,$^) -MF $@
	@$(call hash_deps_in_autogen_dep_file,$@)

%.o : $(call hash_deps,%.c %.d)
	@echo Compiling: $(call unhash_deps,$<) into $@
	@$(CC) -fPIC -o $@ -c $(call unhash_deps,$<)
